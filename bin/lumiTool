#!/usr/bin/env python

from sys import argv
import argparse
parser = argparse.ArgumentParser(description='treedump')
parser.add_argument('--treename',help='input TTree name',type=str,default='events')
parser.add_argument('--run',help='run expression',type=str,default='runNumber')
parser.add_argument('--lumi',help='lumi expression',type=str,default='lumiNumber')
parser.add_argument('infile',metavar='input',type=str,help='input file to process')
args = parser.parse_args()
fpath = args.infile
argv = []

from ROOT import TFile, TTree
from PandaCore.Tools.root_interface import read_tree
import numpy as np

fIn = TFile.Open(fpath)
events = fIn.Get(args.treename)

class lumi(object):
  def __init__(self,low):
    self.low = low
    self.high = low
  def __str__(self):
    return "[%i,%i]"%(self.low,self.high)
  def makeList(self):
    return [self.low,self.high]

branches = [args.lumi, args.run]
arr = read_tree(events,branches)[branches]

unsortedLumis = {}

for l,r in arr:
  if r in unsortedLumis:
    unsortedLumis[r].add(l)
  else:
    unsortedLumis[r] = set([l])

sortedLumis = {}

for run,lumiSet in unsortedLumis.iteritems():
  lumiList = list(lumiSet)
  lumiList.sort()
  shortList = []
  current = None
  for l in lumiList:
    if current == None:
      current = lumi(l)
    elif (l-current.high)>1:
      # if we are skipping more than one
      shortList.append(current.makeList())
      current = lumi(l)
    else:
      # we are continuing the current set of lumis
      current.high = l
  shortList.append(current.makeList()) # add the last one
  sortedLumis["%i"%(run)] = shortList

print sortedLumis

